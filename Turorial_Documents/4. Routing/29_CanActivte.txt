CanActivate
	- use ng g guard <guard-name>
	- choose the option CanActivate
	- in the routing module  we will use option canActivate
		 it will resolve to true and false
		- true means : user can access the routes
		- flase means : use cannot access the routes
	- we can use any number of guard on CanActivate as t
		- In case of multiple guards : All guards should be true to make it work

Use cases
	-  checks if user can loggin
	-  checks if user can Edit the product
	-  check if the user is admin


***************CanActivateChild************
Similar to CanActivate but in this provides guard to its child

****************Can Load******************
This protects the route completely. Such as lazy loading the module and also protects all the routes associated with that module

First generate lazy loading
ng g m preferences --route preferences --module app.module

then create guard using below command and select CanLoad

ng g guard preferenceCheck

******************Can DeActivate********************
	-  WHen we want to make sure that user can deactivate a particular route we will use canDeactivate
	-  Interface that a class can implement to be a guard deciding if a route can be deactivated
	- If all guards return true, navigation continoues. If a guard returns false navigation is cancelled.
	 we write the method for it
	-  CanDe